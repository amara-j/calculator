{"version":3,"sources":["Button.js","Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","containerClassName","id","containerID","onClick","display","Calculator","useState","operand1","updateOperand1","operator","updateOperator","operand2","updateOperand2","result","updateResult","operator_array_display","operator_array","isExpressionEvaluated","toggleEvaluatedState","numberButtonOnClick","i","parseInt","toString","operatorButtonOnClick","element","clearButtonOnClick","equalsButtonOnClick","eval","checkResultError","answer","Number","isNaN","handleIncompleteResult","includes","slice","handleExponentOperatorDisplay","opString","replace","negativeButtonOnClick","decimalButtonOnClick","loopNumberComponents","numberComponents","push","handleDelete","length","substring","handleKeyDown","e","code","shiftKey","key","useEffect","document","addEventListener","removeEventListener","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.569d8f82.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = (props) => {\n  return (\n    <div\n      className={`${props.containerClassName} button`}\n      id={props.containerID}\n      onClick={props.onClick}\n    >\n      {props.display}\n    </div>\n  );\n};\n\nexport default Button;\n","import Button from \"./Button.js\";\nimport { useEffect, useState } from \"react\";\n\nfunction Calculator() {\n  const [operand1, updateOperand1] = useState(\"\");\n  const [operator, updateOperator] = useState(\"\");\n  const [operand2, updateOperand2] = useState(\"\");\n  const [result, updateResult] = useState(0);\n  const operator_array_display = [\"+\", \"-\"];\n  const operator_array = [\"+\", \"-\", \"*\", \"**\", \"/\"];\n  const [isExpressionEvaluated, toggleEvaluatedState] = useState(false);\n\n  const numberButtonOnClick = (i) => {\n    toggleEvaluatedState(false);\n    if (operator === \"\") {\n      parseInt(operand1) === 0\n        ? updateOperand1(i.toString())\n        : updateOperand1(operand1.toString() + i.toString());\n    } else {\n      parseInt(operand2) === 0\n        ? updateOperand2(i.toString())\n        : updateOperand2(operand2.toString() + i.toString());\n    }\n  };\n\n  const operatorButtonOnClick = (element) => {\n    toggleEvaluatedState(false);\n    if (operand1 === \"\") {\n      updateOperand1(0);\n    }\n    updateOperator(element);\n    //if operator already full,\n    if (operator != \"\" && operand2 == \"\") {\n      updateOperator(element);\n      updateOperand2(\"\");\n    }\n    if (operator != \"\" && operand2 != \"\") {\n      updateResult(operand1 + operator + operand2);\n      updateOperand1(operand1 + operator + operand2);\n      updateOperator(element);\n      updateOperand2(\"\");\n    }\n  };\n\n  const clearButtonOnClick = () => {\n    toggleEvaluatedState(false);\n    updateResult(0);\n    updateOperand1(\"\");\n    updateOperand2(\"\");\n    updateOperator(\"\");\n  };\n\n  const equalsButtonOnClick = () => {\n    toggleEvaluatedState(false);\n    if (operand2 != \"\") {\n      updateResult(operand1 + operator + operand2);\n      updateOperand1(eval(operand1 + operator + operand2));\n      updateOperator(\"\");\n      updateOperand2(\"\");\n    } else {\n      updateResult(operand1);\n    }\n    toggleEvaluatedState(true);\n  };\n\n  const checkResultError = (answer) => {\n    if (Number.isNaN(answer)) {\n      return \"Error! Enter another expression.\";\n    }\n    return answer;\n  };\n\n  const handleIncompleteResult = (answer) => {\n    if (operator_array.includes(answer.toString().slice(-1))) {\n      return answer.toString().slice(0, -1);\n    }\n    return answer;\n  };\n\n  const handleExponentOperatorDisplay = (operator) => {\n    const opString = operator.toString();\n    if (opString.includes(\"**\")) {\n      let re = /\\*\\*/g;\n      return opString.replace(re, `^`);\n    }\n    if (opString.includes(\"*\")) {\n      let re = /\\*/g;\n      return opString.replace(re, ` x `);\n    }\n    return operator;\n  };\n\n  const negativeButtonOnClick = () => {\n    toggleEvaluatedState(false);\n    if (operator === \"\") {\n      if (operand1 === \"\") {\n        updateOperand1(\"-1*\");\n      } else {\n        updateOperand1(operand1 + \"*-1\");\n      }\n    } else {\n      if (operand2 === \"\") {\n        updateOperand2(\"-1*\");\n      } else {\n        updateOperand2(operand2 + \"*-1\");\n      }\n    }\n  };\n\n  const decimalButtonOnClick = () => {\n    toggleEvaluatedState(false);\n    if (operator === \"\") {\n      if (!operand1.includes(\".\")) {\n        updateOperand1(operand1.toString() + \".\");\n      }\n    } else {\n      if (!operand2.includes(\".\")) {\n        updateOperand2(operand2.toString() + \".\");\n      }\n    }\n  };\n\n  const loopNumberComponents = () => {\n    let numberComponents = [];\n    for (let i = 0; i < 10; i++) {\n      numberComponents.push(\n        <Button // generate numbers 0-9 in a loop\n          key={i}\n          display={i}\n          containerClassName={\"numberContainer\"}\n          containerID={`number${i}Container`}\n          onClick={() => {\n            numberButtonOnClick(i);\n          }}\n        />\n      );\n    }\n    return numberComponents;\n  };\n\n  const handleDelete = () => {\n    if (operand2.length > 0) {\n      updateOperand2(operand2.substring(0, operand2.length - 1));\n    } else if (operator != \"\") {\n      updateOperator(\"\");\n    } else if (operand1.length > 0) {\n      updateOperand1(operand1.substring(0, operand1.length - 1));\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    // numbers\n    if (e.code.slice(0, 5) === \"Digit\" && e.shiftKey === false) {\n      numberButtonOnClick(e.code.slice(-1));\n      //negative number, but not minus\n    } else if (e.code === \"Minus\" && operand1 === \"\") {\n      negativeButtonOnClick();\n      // decimal point\n    } else if (e.key === \".\") {\n      decimalButtonOnClick();\n    }\n    //operators\n    else if (operator_array.includes(e.key)) {\n      operatorButtonOnClick(e.key);\n    }\n    //enter\n    else if (e.code === \"Enter\" || e.key === \"=\") {\n      equalsButtonOnClick();\n    }\n    //delete\n    else if (e.code === \"Backspace\") {\n      handleDelete();\n      //handle exponent case- should be ^ key but js recognizes it as **\n    } else if (e.key === \"^\") {\n      operatorButtonOnClick(\"**\");\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculatorDisplay\">\n        {isExpressionEvaluated\n          ? checkResultError(eval(handleIncompleteResult(result)))\n          : operand1 + handleExponentOperatorDisplay(operator) + operand2}\n      </div>\n      <div className=\"calculatorButtons\">\n        {operator_array_display.map((element) => {\n          return (\n            <Button // buttons for +, -  in a loop\n              key={element}\n              display={element}\n              containerClassName={\"operatorContainer\"}\n              containerID={element}\n              onClick={() => {\n                operatorButtonOnClick(element);\n              }}\n            />\n          );\n        })}\n        <Button // for *\n          key={\"*\"}\n          display={\"X\"}\n          containerClassName={\"operatorContainer\"}\n          containerID={\"*\"}\n          onClick={() => {\n            operatorButtonOnClick(\"*\");\n          }}\n        />\n\n        <Button // button for /\n          key={\"/\"}\n          display={\"÷\"}\n          containerClassName={\"operatorContainer\"}\n          containerID={\"/\"}\n          onClick={() => {\n            operatorButtonOnClick(\"/\");\n          }}\n        />\n\n        <Button // button for **\n          key={\"**\"}\n          display={\"xⁿ\"}\n          containerClassName={\"operatorContainer\"}\n          containerID={\"**\"}\n          onClick={() => {\n            operatorButtonOnClick(\"**\");\n          }}\n        />\n\n        {loopNumberComponents()}\n        <Button // decimal point button\n          display={\".\"}\n          containerClassName={\"decimalContainer\"}\n          onClick={() => {\n            decimalButtonOnClick();\n          }}\n        />\n        <Button // equals button\n          display={\"=\"}\n          containerClassName={\"equalsContainer\"}\n          onClick={() => {\n            equalsButtonOnClick();\n          }}\n        />\n        <Button //  clear button\n          display={\"AC\"}\n          containerClassName={\"clearContainer\"}\n          onClick={() => clearButtonOnClick()}\n        />\n        <Button // negative button\n          display={\"-x\"}\n          containerClassName={\"negativeContainer\"}\n          onClick={() => {\n            negativeButtonOnClick();\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import \"./App.css\";\nimport Calculator from \"./Calculator.js\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}